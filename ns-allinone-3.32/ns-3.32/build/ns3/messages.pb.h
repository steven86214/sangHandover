// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace ns3opengym {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class BoxDataContainer;
class BoxSpace;
class DataContainer;
class DictDataContainer;
class DictSpace;
class DiscreteDataContainer;
class DiscreteSpace;
class EnvActMsg;
class EnvStateMsg;
class SimInitAck;
class SimInitMsg;
class SpaceDescription;
class TupleDataContainer;
class TupleSpace;

enum EnvStateMsg_Reason {
  EnvStateMsg_Reason_SimulationEnd = 0,
  EnvStateMsg_Reason_GameOver = 1,
  EnvStateMsg_Reason_EnvStateMsg_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnvStateMsg_Reason_EnvStateMsg_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnvStateMsg_Reason_IsValid(int value);
const EnvStateMsg_Reason EnvStateMsg_Reason_Reason_MIN = EnvStateMsg_Reason_SimulationEnd;
const EnvStateMsg_Reason EnvStateMsg_Reason_Reason_MAX = EnvStateMsg_Reason_GameOver;
const int EnvStateMsg_Reason_Reason_ARRAYSIZE = EnvStateMsg_Reason_Reason_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvStateMsg_Reason_descriptor();
inline const ::std::string& EnvStateMsg_Reason_Name(EnvStateMsg_Reason value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvStateMsg_Reason_descriptor(), value);
}
inline bool EnvStateMsg_Reason_Parse(
    const ::std::string& name, EnvStateMsg_Reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvStateMsg_Reason>(
    EnvStateMsg_Reason_descriptor(), name, value);
}
enum MsgType {
  Unknown = 0,
  Init = 1,
  ActionSpace = 2,
  ObservationSpace = 3,
  IsGameOver = 4,
  Observation = 5,
  Reward = 6,
  ExtraInfo = 7,
  Action = 8,
  StopEnv = 9,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = Unknown;
const MsgType MsgType_MAX = StopEnv;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum SpaceType {
  NoSpaceType = 0,
  Discrete = 1,
  Box = 2,
  Tuple = 3,
  Dict = 4,
  SpaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SpaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SpaceType_IsValid(int value);
const SpaceType SpaceType_MIN = NoSpaceType;
const SpaceType SpaceType_MAX = Dict;
const int SpaceType_ARRAYSIZE = SpaceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpaceType_descriptor();
inline const ::std::string& SpaceType_Name(SpaceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpaceType_descriptor(), value);
}
inline bool SpaceType_Parse(
    const ::std::string& name, SpaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpaceType>(
    SpaceType_descriptor(), name, value);
}
enum Dtype {
  NoDType = 0,
  INT = 1,
  UINT = 2,
  FLOAT = 3,
  DOUBLE = 4,
  Dtype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Dtype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Dtype_IsValid(int value);
const Dtype Dtype_MIN = NoDType;
const Dtype Dtype_MAX = DOUBLE;
const int Dtype_ARRAYSIZE = Dtype_MAX + 1;

const ::google::protobuf::EnumDescriptor* Dtype_descriptor();
inline const ::std::string& Dtype_Name(Dtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    Dtype_descriptor(), value);
}
inline bool Dtype_Parse(
    const ::std::string& name, Dtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Dtype>(
    Dtype_descriptor(), name, value);
}
// ===================================================================

class SpaceDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.SpaceDescription) */ {
 public:
  SpaceDescription();
  virtual ~SpaceDescription();

  SpaceDescription(const SpaceDescription& from);

  inline SpaceDescription& operator=(const SpaceDescription& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpaceDescription& default_instance();

  void Swap(SpaceDescription* other);

  // implements Message ----------------------------------------------

  inline SpaceDescription* New() const { return New(NULL); }

  SpaceDescription* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpaceDescription& from);
  void MergeFrom(const SpaceDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpaceDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ns3opengym.SpaceType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ns3opengym::SpaceType type() const;
  void set_type(::ns3opengym::SpaceType value);

  // optional .google.protobuf.Any space = 2;
  bool has_space() const;
  void clear_space();
  static const int kSpaceFieldNumber = 2;
  const ::google::protobuf::Any& space() const;
  ::google::protobuf::Any* mutable_space();
  ::google::protobuf::Any* release_space();
  void set_allocated_space(::google::protobuf::Any* space);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ns3opengym.SpaceDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* space_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static SpaceDescription* default_instance_;
};
// -------------------------------------------------------------------

class DiscreteSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DiscreteSpace) */ {
 public:
  DiscreteSpace();
  virtual ~DiscreteSpace();

  DiscreteSpace(const DiscreteSpace& from);

  inline DiscreteSpace& operator=(const DiscreteSpace& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscreteSpace& default_instance();

  void Swap(DiscreteSpace* other);

  // implements Message ----------------------------------------------

  inline DiscreteSpace* New() const { return New(NULL); }

  DiscreteSpace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiscreteSpace& from);
  void MergeFrom(const DiscreteSpace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscreteSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 n = 1;
  void clear_n();
  static const int kNFieldNumber = 1;
  ::google::protobuf::int32 n() const;
  void set_n(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ns3opengym.DiscreteSpace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 n_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DiscreteSpace* default_instance_;
};
// -------------------------------------------------------------------

class BoxSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.BoxSpace) */ {
 public:
  BoxSpace();
  virtual ~BoxSpace();

  BoxSpace(const BoxSpace& from);

  inline BoxSpace& operator=(const BoxSpace& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxSpace& default_instance();

  void Swap(BoxSpace* other);

  // implements Message ----------------------------------------------

  inline BoxSpace* New() const { return New(NULL); }

  BoxSpace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoxSpace& from);
  void MergeFrom(const BoxSpace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoxSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float low = 1;
  void clear_low();
  static const int kLowFieldNumber = 1;
  float low() const;
  void set_low(float value);

  // optional float high = 2;
  void clear_high();
  static const int kHighFieldNumber = 2;
  float high() const;
  void set_high(float value);

  // optional .ns3opengym.Dtype dtype = 3;
  void clear_dtype();
  static const int kDtypeFieldNumber = 3;
  ::ns3opengym::Dtype dtype() const;
  void set_dtype(::ns3opengym::Dtype value);

  // repeated uint32 shape = 4;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  ::google::protobuf::uint32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::uint32 value);
  void add_shape(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shape();

  // @@protoc_insertion_point(class_scope:ns3opengym.BoxSpace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float low_;
  float high_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shape_;
  mutable int _shape_cached_byte_size_;
  int dtype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static BoxSpace* default_instance_;
};
// -------------------------------------------------------------------

class TupleSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.TupleSpace) */ {
 public:
  TupleSpace();
  virtual ~TupleSpace();

  TupleSpace(const TupleSpace& from);

  inline TupleSpace& operator=(const TupleSpace& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TupleSpace& default_instance();

  void Swap(TupleSpace* other);

  // implements Message ----------------------------------------------

  inline TupleSpace* New() const { return New(NULL); }

  TupleSpace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TupleSpace& from);
  void MergeFrom(const TupleSpace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TupleSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ns3opengym.SpaceDescription element = 1;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  const ::ns3opengym::SpaceDescription& element(int index) const;
  ::ns3opengym::SpaceDescription* mutable_element(int index);
  ::ns3opengym::SpaceDescription* add_element();
  ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
      mutable_element();
  const ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
      element() const;

  // @@protoc_insertion_point(class_scope:ns3opengym.TupleSpace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription > element_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TupleSpace* default_instance_;
};
// -------------------------------------------------------------------

class DictSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DictSpace) */ {
 public:
  DictSpace();
  virtual ~DictSpace();

  DictSpace(const DictSpace& from);

  inline DictSpace& operator=(const DictSpace& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictSpace& default_instance();

  void Swap(DictSpace* other);

  // implements Message ----------------------------------------------

  inline DictSpace* New() const { return New(NULL); }

  DictSpace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictSpace& from);
  void MergeFrom(const DictSpace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ns3opengym.SpaceDescription element = 1;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  const ::ns3opengym::SpaceDescription& element(int index) const;
  ::ns3opengym::SpaceDescription* mutable_element(int index);
  ::ns3opengym::SpaceDescription* add_element();
  ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
      mutable_element();
  const ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
      element() const;

  // @@protoc_insertion_point(class_scope:ns3opengym.DictSpace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription > element_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DictSpace* default_instance_;
};
// -------------------------------------------------------------------

class DataContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DataContainer) */ {
 public:
  DataContainer();
  virtual ~DataContainer();

  DataContainer(const DataContainer& from);

  inline DataContainer& operator=(const DataContainer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataContainer& default_instance();

  void Swap(DataContainer* other);

  // implements Message ----------------------------------------------

  inline DataContainer* New() const { return New(NULL); }

  DataContainer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataContainer& from);
  void MergeFrom(const DataContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ns3opengym.SpaceType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ns3opengym::SpaceType type() const;
  void set_type(::ns3opengym::SpaceType value);

  // optional .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ns3opengym.DataContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DataContainer* default_instance_;
};
// -------------------------------------------------------------------

class DiscreteDataContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DiscreteDataContainer) */ {
 public:
  DiscreteDataContainer();
  virtual ~DiscreteDataContainer();

  DiscreteDataContainer(const DiscreteDataContainer& from);

  inline DiscreteDataContainer& operator=(const DiscreteDataContainer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscreteDataContainer& default_instance();

  void Swap(DiscreteDataContainer* other);

  // implements Message ----------------------------------------------

  inline DiscreteDataContainer* New() const { return New(NULL); }

  DiscreteDataContainer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiscreteDataContainer& from);
  void MergeFrom(const DiscreteDataContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscreteDataContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  ::google::protobuf::int32 data() const;
  void set_data(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ns3opengym.DiscreteDataContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DiscreteDataContainer* default_instance_;
};
// -------------------------------------------------------------------

class BoxDataContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.BoxDataContainer) */ {
 public:
  BoxDataContainer();
  virtual ~BoxDataContainer();

  BoxDataContainer(const BoxDataContainer& from);

  inline BoxDataContainer& operator=(const BoxDataContainer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxDataContainer& default_instance();

  void Swap(BoxDataContainer* other);

  // implements Message ----------------------------------------------

  inline BoxDataContainer* New() const { return New(NULL); }

  BoxDataContainer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoxDataContainer& from);
  void MergeFrom(const BoxDataContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoxDataContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ns3opengym.Dtype dtype = 1;
  void clear_dtype();
  static const int kDtypeFieldNumber = 1;
  ::ns3opengym::Dtype dtype() const;
  void set_dtype(::ns3opengym::Dtype value);

  // repeated uint32 shape = 2;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  ::google::protobuf::uint32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::uint32 value);
  void add_shape(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shape();

  // repeated int32 intData = 3;
  int intdata_size() const;
  void clear_intdata();
  static const int kIntDataFieldNumber = 3;
  ::google::protobuf::int32 intdata(int index) const;
  void set_intdata(int index, ::google::protobuf::int32 value);
  void add_intdata(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      intdata() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_intdata();

  // repeated uint32 uintData = 4;
  int uintdata_size() const;
  void clear_uintdata();
  static const int kUintDataFieldNumber = 4;
  ::google::protobuf::uint32 uintdata(int index) const;
  void set_uintdata(int index, ::google::protobuf::uint32 value);
  void add_uintdata(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uintdata() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uintdata();

  // repeated float floatData = 5;
  int floatdata_size() const;
  void clear_floatdata();
  static const int kFloatDataFieldNumber = 5;
  float floatdata(int index) const;
  void set_floatdata(int index, float value);
  void add_floatdata(float value);
  const ::google::protobuf::RepeatedField< float >&
      floatdata() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_floatdata();

  // repeated double doubleData = 6;
  int doubledata_size() const;
  void clear_doubledata();
  static const int kDoubleDataFieldNumber = 6;
  double doubledata(int index) const;
  void set_doubledata(int index, double value);
  void add_doubledata(double value);
  const ::google::protobuf::RepeatedField< double >&
      doubledata() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_doubledata();

  // @@protoc_insertion_point(class_scope:ns3opengym.BoxDataContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > intdata_;
  mutable int _intdata_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uintdata_;
  mutable int _uintdata_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > floatdata_;
  mutable int _floatdata_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > doubledata_;
  mutable int _doubledata_cached_byte_size_;
  int dtype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static BoxDataContainer* default_instance_;
};
// -------------------------------------------------------------------

class TupleDataContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.TupleDataContainer) */ {
 public:
  TupleDataContainer();
  virtual ~TupleDataContainer();

  TupleDataContainer(const TupleDataContainer& from);

  inline TupleDataContainer& operator=(const TupleDataContainer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TupleDataContainer& default_instance();

  void Swap(TupleDataContainer* other);

  // implements Message ----------------------------------------------

  inline TupleDataContainer* New() const { return New(NULL); }

  TupleDataContainer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TupleDataContainer& from);
  void MergeFrom(const TupleDataContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TupleDataContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ns3opengym.DataContainer element = 1;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  const ::ns3opengym::DataContainer& element(int index) const;
  ::ns3opengym::DataContainer* mutable_element(int index);
  ::ns3opengym::DataContainer* add_element();
  ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >*
      mutable_element();
  const ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >&
      element() const;

  // @@protoc_insertion_point(class_scope:ns3opengym.TupleDataContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer > element_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static TupleDataContainer* default_instance_;
};
// -------------------------------------------------------------------

class DictDataContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.DictDataContainer) */ {
 public:
  DictDataContainer();
  virtual ~DictDataContainer();

  DictDataContainer(const DictDataContainer& from);

  inline DictDataContainer& operator=(const DictDataContainer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictDataContainer& default_instance();

  void Swap(DictDataContainer* other);

  // implements Message ----------------------------------------------

  inline DictDataContainer* New() const { return New(NULL); }

  DictDataContainer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictDataContainer& from);
  void MergeFrom(const DictDataContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictDataContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ns3opengym.DataContainer element = 1;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  const ::ns3opengym::DataContainer& element(int index) const;
  ::ns3opengym::DataContainer* mutable_element(int index);
  ::ns3opengym::DataContainer* add_element();
  ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >*
      mutable_element();
  const ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >&
      element() const;

  // @@protoc_insertion_point(class_scope:ns3opengym.DictDataContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer > element_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static DictDataContainer* default_instance_;
};
// -------------------------------------------------------------------

class SimInitMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.SimInitMsg) */ {
 public:
  SimInitMsg();
  virtual ~SimInitMsg();

  SimInitMsg(const SimInitMsg& from);

  inline SimInitMsg& operator=(const SimInitMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimInitMsg& default_instance();

  void Swap(SimInitMsg* other);

  // implements Message ----------------------------------------------

  inline SimInitMsg* New() const { return New(NULL); }

  SimInitMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimInitMsg& from);
  void MergeFrom(const SimInitMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimInitMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 simProcessId = 1;
  void clear_simprocessid();
  static const int kSimProcessIdFieldNumber = 1;
  ::google::protobuf::uint64 simprocessid() const;
  void set_simprocessid(::google::protobuf::uint64 value);

  // optional uint64 wafShellProcessId = 2;
  void clear_wafshellprocessid();
  static const int kWafShellProcessIdFieldNumber = 2;
  ::google::protobuf::uint64 wafshellprocessid() const;
  void set_wafshellprocessid(::google::protobuf::uint64 value);

  // optional .ns3opengym.SpaceDescription obsSpace = 3;
  bool has_obsspace() const;
  void clear_obsspace();
  static const int kObsSpaceFieldNumber = 3;
  const ::ns3opengym::SpaceDescription& obsspace() const;
  ::ns3opengym::SpaceDescription* mutable_obsspace();
  ::ns3opengym::SpaceDescription* release_obsspace();
  void set_allocated_obsspace(::ns3opengym::SpaceDescription* obsspace);

  // optional .ns3opengym.SpaceDescription actSpace = 4;
  bool has_actspace() const;
  void clear_actspace();
  static const int kActSpaceFieldNumber = 4;
  const ::ns3opengym::SpaceDescription& actspace() const;
  ::ns3opengym::SpaceDescription* mutable_actspace();
  ::ns3opengym::SpaceDescription* release_actspace();
  void set_allocated_actspace(::ns3opengym::SpaceDescription* actspace);

  // @@protoc_insertion_point(class_scope:ns3opengym.SimInitMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 simprocessid_;
  ::google::protobuf::uint64 wafshellprocessid_;
  ::ns3opengym::SpaceDescription* obsspace_;
  ::ns3opengym::SpaceDescription* actspace_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static SimInitMsg* default_instance_;
};
// -------------------------------------------------------------------

class SimInitAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.SimInitAck) */ {
 public:
  SimInitAck();
  virtual ~SimInitAck();

  SimInitAck(const SimInitAck& from);

  inline SimInitAck& operator=(const SimInitAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimInitAck& default_instance();

  void Swap(SimInitAck* other);

  // implements Message ----------------------------------------------

  inline SimInitAck* New() const { return New(NULL); }

  SimInitAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimInitAck& from);
  void MergeFrom(const SimInitAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimInitAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool done = 1;
  void clear_done();
  static const int kDoneFieldNumber = 1;
  bool done() const;
  void set_done(bool value);

  // optional bool stopSimReq = 2;
  void clear_stopsimreq();
  static const int kStopSimReqFieldNumber = 2;
  bool stopsimreq() const;
  void set_stopsimreq(bool value);

  // @@protoc_insertion_point(class_scope:ns3opengym.SimInitAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool done_;
  bool stopsimreq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static SimInitAck* default_instance_;
};
// -------------------------------------------------------------------

class EnvStateMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.EnvStateMsg) */ {
 public:
  EnvStateMsg();
  virtual ~EnvStateMsg();

  EnvStateMsg(const EnvStateMsg& from);

  inline EnvStateMsg& operator=(const EnvStateMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvStateMsg& default_instance();

  void Swap(EnvStateMsg* other);

  // implements Message ----------------------------------------------

  inline EnvStateMsg* New() const { return New(NULL); }

  EnvStateMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnvStateMsg& from);
  void MergeFrom(const EnvStateMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnvStateMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EnvStateMsg_Reason Reason;
  static const Reason SimulationEnd =
    EnvStateMsg_Reason_SimulationEnd;
  static const Reason GameOver =
    EnvStateMsg_Reason_GameOver;
  static inline bool Reason_IsValid(int value) {
    return EnvStateMsg_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    EnvStateMsg_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    EnvStateMsg_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    EnvStateMsg_Reason_Reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reason_descriptor() {
    return EnvStateMsg_Reason_descriptor();
  }
  static inline const ::std::string& Reason_Name(Reason value) {
    return EnvStateMsg_Reason_Name(value);
  }
  static inline bool Reason_Parse(const ::std::string& name,
      Reason* value) {
    return EnvStateMsg_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ns3opengym.DataContainer obsData = 1;
  bool has_obsdata() const;
  void clear_obsdata();
  static const int kObsDataFieldNumber = 1;
  const ::ns3opengym::DataContainer& obsdata() const;
  ::ns3opengym::DataContainer* mutable_obsdata();
  ::ns3opengym::DataContainer* release_obsdata();
  void set_allocated_obsdata(::ns3opengym::DataContainer* obsdata);

  // optional float reward = 2;
  void clear_reward();
  static const int kRewardFieldNumber = 2;
  float reward() const;
  void set_reward(float value);

  // optional bool isGameOver = 3;
  void clear_isgameover();
  static const int kIsGameOverFieldNumber = 3;
  bool isgameover() const;
  void set_isgameover(bool value);

  // optional .ns3opengym.EnvStateMsg.Reason reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  ::ns3opengym::EnvStateMsg_Reason reason() const;
  void set_reason(::ns3opengym::EnvStateMsg_Reason value);

  // optional string info = 5;
  void clear_info();
  static const int kInfoFieldNumber = 5;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:ns3opengym.EnvStateMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ns3opengym::DataContainer* obsdata_;
  float reward_;
  bool isgameover_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  int reason_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static EnvStateMsg* default_instance_;
};
// -------------------------------------------------------------------

class EnvActMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ns3opengym.EnvActMsg) */ {
 public:
  EnvActMsg();
  virtual ~EnvActMsg();

  EnvActMsg(const EnvActMsg& from);

  inline EnvActMsg& operator=(const EnvActMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvActMsg& default_instance();

  void Swap(EnvActMsg* other);

  // implements Message ----------------------------------------------

  inline EnvActMsg* New() const { return New(NULL); }

  EnvActMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnvActMsg& from);
  void MergeFrom(const EnvActMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnvActMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ns3opengym.DataContainer actData = 1;
  bool has_actdata() const;
  void clear_actdata();
  static const int kActDataFieldNumber = 1;
  const ::ns3opengym::DataContainer& actdata() const;
  ::ns3opengym::DataContainer* mutable_actdata();
  ::ns3opengym::DataContainer* release_actdata();
  void set_allocated_actdata(::ns3opengym::DataContainer* actdata);

  // optional bool stopSimReq = 2;
  void clear_stopsimreq();
  static const int kStopSimReqFieldNumber = 2;
  bool stopsimreq() const;
  void set_stopsimreq(bool value);

  // @@protoc_insertion_point(class_scope:ns3opengym.EnvActMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ns3opengym::DataContainer* actdata_;
  bool stopsimreq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static EnvActMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpaceDescription

// optional .ns3opengym.SpaceType type = 1;
inline void SpaceDescription::clear_type() {
  type_ = 0;
}
inline ::ns3opengym::SpaceType SpaceDescription::type() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.type)
  return static_cast< ::ns3opengym::SpaceType >(type_);
}
inline void SpaceDescription::set_type(::ns3opengym::SpaceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SpaceDescription.type)
}

// optional .google.protobuf.Any space = 2;
inline bool SpaceDescription::has_space() const {
  return !_is_default_instance_ && space_ != NULL;
}
inline void SpaceDescription::clear_space() {
  if (GetArenaNoVirtual() == NULL && space_ != NULL) delete space_;
  space_ = NULL;
}
inline const ::google::protobuf::Any& SpaceDescription::space() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.space)
  return space_ != NULL ? *space_ : *default_instance_->space_;
}
inline ::google::protobuf::Any* SpaceDescription::mutable_space() {
  
  if (space_ == NULL) {
    space_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.SpaceDescription.space)
  return space_;
}
inline ::google::protobuf::Any* SpaceDescription::release_space() {
  // @@protoc_insertion_point(field_release:ns3opengym.SpaceDescription.space)
  
  ::google::protobuf::Any* temp = space_;
  space_ = NULL;
  return temp;
}
inline void SpaceDescription::set_allocated_space(::google::protobuf::Any* space) {
  delete space_;
  space_ = space;
  if (space) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SpaceDescription.space)
}

// optional string name = 3;
inline void SpaceDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpaceDescription::name() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SpaceDescription.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ns3opengym.SpaceDescription.name)
}
inline void SpaceDescription::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.SpaceDescription.name)
}
inline void SpaceDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.SpaceDescription.name)
}
inline ::std::string* SpaceDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ns3opengym.SpaceDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpaceDescription::release_name() {
  // @@protoc_insertion_point(field_release:ns3opengym.SpaceDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SpaceDescription.name)
}

// -------------------------------------------------------------------

// DiscreteSpace

// optional int32 n = 1;
inline void DiscreteSpace::clear_n() {
  n_ = 0;
}
inline ::google::protobuf::int32 DiscreteSpace::n() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DiscreteSpace.n)
  return n_;
}
inline void DiscreteSpace::set_n(::google::protobuf::int32 value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.DiscreteSpace.n)
}

// -------------------------------------------------------------------

// BoxSpace

// optional float low = 1;
inline void BoxSpace::clear_low() {
  low_ = 0;
}
inline float BoxSpace::low() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.low)
  return low_;
}
inline void BoxSpace::set_low(float value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.low)
}

// optional float high = 2;
inline void BoxSpace::clear_high() {
  high_ = 0;
}
inline float BoxSpace::high() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.high)
  return high_;
}
inline void BoxSpace::set_high(float value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.high)
}

// optional .ns3opengym.Dtype dtype = 3;
inline void BoxSpace::clear_dtype() {
  dtype_ = 0;
}
inline ::ns3opengym::Dtype BoxSpace::dtype() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.dtype)
  return static_cast< ::ns3opengym::Dtype >(dtype_);
}
inline void BoxSpace::set_dtype(::ns3opengym::Dtype value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.dtype)
}

// repeated uint32 shape = 4;
inline int BoxSpace::shape_size() const {
  return shape_.size();
}
inline void BoxSpace::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::uint32 BoxSpace::shape(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxSpace.shape)
  return shape_.Get(index);
}
inline void BoxSpace::set_shape(int index, ::google::protobuf::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxSpace.shape)
}
inline void BoxSpace::add_shape(::google::protobuf::uint32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxSpace.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BoxSpace::shape() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxSpace.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BoxSpace::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxSpace.shape)
  return &shape_;
}

// -------------------------------------------------------------------

// TupleSpace

// repeated .ns3opengym.SpaceDescription element = 1;
inline int TupleSpace::element_size() const {
  return element_.size();
}
inline void TupleSpace::clear_element() {
  element_.Clear();
}
inline const ::ns3opengym::SpaceDescription& TupleSpace::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.TupleSpace.element)
  return element_.Get(index);
}
inline ::ns3opengym::SpaceDescription* TupleSpace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.TupleSpace.element)
  return element_.Mutable(index);
}
inline ::ns3opengym::SpaceDescription* TupleSpace::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.TupleSpace.element)
  return element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
TupleSpace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.TupleSpace.element)
  return &element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
TupleSpace::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.TupleSpace.element)
  return element_;
}

// -------------------------------------------------------------------

// DictSpace

// repeated .ns3opengym.SpaceDescription element = 1;
inline int DictSpace::element_size() const {
  return element_.size();
}
inline void DictSpace::clear_element() {
  element_.Clear();
}
inline const ::ns3opengym::SpaceDescription& DictSpace::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.DictSpace.element)
  return element_.Get(index);
}
inline ::ns3opengym::SpaceDescription* DictSpace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.DictSpace.element)
  return element_.Mutable(index);
}
inline ::ns3opengym::SpaceDescription* DictSpace::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.DictSpace.element)
  return element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >*
DictSpace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.DictSpace.element)
  return &element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ns3opengym::SpaceDescription >&
DictSpace::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.DictSpace.element)
  return element_;
}

// -------------------------------------------------------------------

// DataContainer

// optional .ns3opengym.SpaceType type = 1;
inline void DataContainer::clear_type() {
  type_ = 0;
}
inline ::ns3opengym::SpaceType DataContainer::type() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.type)
  return static_cast< ::ns3opengym::SpaceType >(type_);
}
inline void DataContainer::set_type(::ns3opengym::SpaceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.DataContainer.type)
}

// optional .google.protobuf.Any data = 2;
inline bool DataContainer::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void DataContainer::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& DataContainer::data() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* DataContainer::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.DataContainer.data)
  return data_;
}
inline ::google::protobuf::Any* DataContainer::release_data() {
  // @@protoc_insertion_point(field_release:ns3opengym.DataContainer.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DataContainer::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.DataContainer.data)
}

// optional string name = 3;
inline void DataContainer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataContainer::name() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DataContainer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataContainer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ns3opengym.DataContainer.name)
}
inline void DataContainer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.DataContainer.name)
}
inline void DataContainer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.DataContainer.name)
}
inline ::std::string* DataContainer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ns3opengym.DataContainer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataContainer::release_name() {
  // @@protoc_insertion_point(field_release:ns3opengym.DataContainer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataContainer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.DataContainer.name)
}

// -------------------------------------------------------------------

// DiscreteDataContainer

// optional int32 data = 1;
inline void DiscreteDataContainer::clear_data() {
  data_ = 0;
}
inline ::google::protobuf::int32 DiscreteDataContainer::data() const {
  // @@protoc_insertion_point(field_get:ns3opengym.DiscreteDataContainer.data)
  return data_;
}
inline void DiscreteDataContainer::set_data(::google::protobuf::int32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.DiscreteDataContainer.data)
}

// -------------------------------------------------------------------

// BoxDataContainer

// optional .ns3opengym.Dtype dtype = 1;
inline void BoxDataContainer::clear_dtype() {
  dtype_ = 0;
}
inline ::ns3opengym::Dtype BoxDataContainer::dtype() const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.dtype)
  return static_cast< ::ns3opengym::Dtype >(dtype_);
}
inline void BoxDataContainer::set_dtype(::ns3opengym::Dtype value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.dtype)
}

// repeated uint32 shape = 2;
inline int BoxDataContainer::shape_size() const {
  return shape_.size();
}
inline void BoxDataContainer::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::uint32 BoxDataContainer::shape(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.shape)
  return shape_.Get(index);
}
inline void BoxDataContainer::set_shape(int index, ::google::protobuf::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.shape)
}
inline void BoxDataContainer::add_shape(::google::protobuf::uint32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BoxDataContainer::shape() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BoxDataContainer::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.shape)
  return &shape_;
}

// repeated int32 intData = 3;
inline int BoxDataContainer::intdata_size() const {
  return intdata_.size();
}
inline void BoxDataContainer::clear_intdata() {
  intdata_.Clear();
}
inline ::google::protobuf::int32 BoxDataContainer::intdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.intData)
  return intdata_.Get(index);
}
inline void BoxDataContainer::set_intdata(int index, ::google::protobuf::int32 value) {
  intdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.intData)
}
inline void BoxDataContainer::add_intdata(::google::protobuf::int32 value) {
  intdata_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.intData)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BoxDataContainer::intdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.intData)
  return intdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BoxDataContainer::mutable_intdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.intData)
  return &intdata_;
}

// repeated uint32 uintData = 4;
inline int BoxDataContainer::uintdata_size() const {
  return uintdata_.size();
}
inline void BoxDataContainer::clear_uintdata() {
  uintdata_.Clear();
}
inline ::google::protobuf::uint32 BoxDataContainer::uintdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.uintData)
  return uintdata_.Get(index);
}
inline void BoxDataContainer::set_uintdata(int index, ::google::protobuf::uint32 value) {
  uintdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.uintData)
}
inline void BoxDataContainer::add_uintdata(::google::protobuf::uint32 value) {
  uintdata_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.uintData)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BoxDataContainer::uintdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.uintData)
  return uintdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BoxDataContainer::mutable_uintdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.uintData)
  return &uintdata_;
}

// repeated float floatData = 5;
inline int BoxDataContainer::floatdata_size() const {
  return floatdata_.size();
}
inline void BoxDataContainer::clear_floatdata() {
  floatdata_.Clear();
}
inline float BoxDataContainer::floatdata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.floatData)
  return floatdata_.Get(index);
}
inline void BoxDataContainer::set_floatdata(int index, float value) {
  floatdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.floatData)
}
inline void BoxDataContainer::add_floatdata(float value) {
  floatdata_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.floatData)
}
inline const ::google::protobuf::RepeatedField< float >&
BoxDataContainer::floatdata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.floatData)
  return floatdata_;
}
inline ::google::protobuf::RepeatedField< float >*
BoxDataContainer::mutable_floatdata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.floatData)
  return &floatdata_;
}

// repeated double doubleData = 6;
inline int BoxDataContainer::doubledata_size() const {
  return doubledata_.size();
}
inline void BoxDataContainer::clear_doubledata() {
  doubledata_.Clear();
}
inline double BoxDataContainer::doubledata(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.BoxDataContainer.doubleData)
  return doubledata_.Get(index);
}
inline void BoxDataContainer::set_doubledata(int index, double value) {
  doubledata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ns3opengym.BoxDataContainer.doubleData)
}
inline void BoxDataContainer::add_doubledata(double value) {
  doubledata_.Add(value);
  // @@protoc_insertion_point(field_add:ns3opengym.BoxDataContainer.doubleData)
}
inline const ::google::protobuf::RepeatedField< double >&
BoxDataContainer::doubledata() const {
  // @@protoc_insertion_point(field_list:ns3opengym.BoxDataContainer.doubleData)
  return doubledata_;
}
inline ::google::protobuf::RepeatedField< double >*
BoxDataContainer::mutable_doubledata() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.BoxDataContainer.doubleData)
  return &doubledata_;
}

// -------------------------------------------------------------------

// TupleDataContainer

// repeated .ns3opengym.DataContainer element = 1;
inline int TupleDataContainer::element_size() const {
  return element_.size();
}
inline void TupleDataContainer::clear_element() {
  element_.Clear();
}
inline const ::ns3opengym::DataContainer& TupleDataContainer::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.TupleDataContainer.element)
  return element_.Get(index);
}
inline ::ns3opengym::DataContainer* TupleDataContainer::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.TupleDataContainer.element)
  return element_.Mutable(index);
}
inline ::ns3opengym::DataContainer* TupleDataContainer::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.TupleDataContainer.element)
  return element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >*
TupleDataContainer::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.TupleDataContainer.element)
  return &element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >&
TupleDataContainer::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.TupleDataContainer.element)
  return element_;
}

// -------------------------------------------------------------------

// DictDataContainer

// repeated .ns3opengym.DataContainer element = 1;
inline int DictDataContainer::element_size() const {
  return element_.size();
}
inline void DictDataContainer::clear_element() {
  element_.Clear();
}
inline const ::ns3opengym::DataContainer& DictDataContainer::element(int index) const {
  // @@protoc_insertion_point(field_get:ns3opengym.DictDataContainer.element)
  return element_.Get(index);
}
inline ::ns3opengym::DataContainer* DictDataContainer::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ns3opengym.DictDataContainer.element)
  return element_.Mutable(index);
}
inline ::ns3opengym::DataContainer* DictDataContainer::add_element() {
  // @@protoc_insertion_point(field_add:ns3opengym.DictDataContainer.element)
  return element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >*
DictDataContainer::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ns3opengym.DictDataContainer.element)
  return &element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ns3opengym::DataContainer >&
DictDataContainer::element() const {
  // @@protoc_insertion_point(field_list:ns3opengym.DictDataContainer.element)
  return element_;
}

// -------------------------------------------------------------------

// SimInitMsg

// optional uint64 simProcessId = 1;
inline void SimInitMsg::clear_simprocessid() {
  simprocessid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SimInitMsg::simprocessid() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.simProcessId)
  return simprocessid_;
}
inline void SimInitMsg::set_simprocessid(::google::protobuf::uint64 value) {
  
  simprocessid_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitMsg.simProcessId)
}

// optional uint64 wafShellProcessId = 2;
inline void SimInitMsg::clear_wafshellprocessid() {
  wafshellprocessid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SimInitMsg::wafshellprocessid() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.wafShellProcessId)
  return wafshellprocessid_;
}
inline void SimInitMsg::set_wafshellprocessid(::google::protobuf::uint64 value) {
  
  wafshellprocessid_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitMsg.wafShellProcessId)
}

// optional .ns3opengym.SpaceDescription obsSpace = 3;
inline bool SimInitMsg::has_obsspace() const {
  return !_is_default_instance_ && obsspace_ != NULL;
}
inline void SimInitMsg::clear_obsspace() {
  if (GetArenaNoVirtual() == NULL && obsspace_ != NULL) delete obsspace_;
  obsspace_ = NULL;
}
inline const ::ns3opengym::SpaceDescription& SimInitMsg::obsspace() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.obsSpace)
  return obsspace_ != NULL ? *obsspace_ : *default_instance_->obsspace_;
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::mutable_obsspace() {
  
  if (obsspace_ == NULL) {
    obsspace_ = new ::ns3opengym::SpaceDescription;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.SimInitMsg.obsSpace)
  return obsspace_;
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::release_obsspace() {
  // @@protoc_insertion_point(field_release:ns3opengym.SimInitMsg.obsSpace)
  
  ::ns3opengym::SpaceDescription* temp = obsspace_;
  obsspace_ = NULL;
  return temp;
}
inline void SimInitMsg::set_allocated_obsspace(::ns3opengym::SpaceDescription* obsspace) {
  delete obsspace_;
  obsspace_ = obsspace;
  if (obsspace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SimInitMsg.obsSpace)
}

// optional .ns3opengym.SpaceDescription actSpace = 4;
inline bool SimInitMsg::has_actspace() const {
  return !_is_default_instance_ && actspace_ != NULL;
}
inline void SimInitMsg::clear_actspace() {
  if (GetArenaNoVirtual() == NULL && actspace_ != NULL) delete actspace_;
  actspace_ = NULL;
}
inline const ::ns3opengym::SpaceDescription& SimInitMsg::actspace() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitMsg.actSpace)
  return actspace_ != NULL ? *actspace_ : *default_instance_->actspace_;
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::mutable_actspace() {
  
  if (actspace_ == NULL) {
    actspace_ = new ::ns3opengym::SpaceDescription;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.SimInitMsg.actSpace)
  return actspace_;
}
inline ::ns3opengym::SpaceDescription* SimInitMsg::release_actspace() {
  // @@protoc_insertion_point(field_release:ns3opengym.SimInitMsg.actSpace)
  
  ::ns3opengym::SpaceDescription* temp = actspace_;
  actspace_ = NULL;
  return temp;
}
inline void SimInitMsg::set_allocated_actspace(::ns3opengym::SpaceDescription* actspace) {
  delete actspace_;
  actspace_ = actspace;
  if (actspace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.SimInitMsg.actSpace)
}

// -------------------------------------------------------------------

// SimInitAck

// optional bool done = 1;
inline void SimInitAck::clear_done() {
  done_ = false;
}
inline bool SimInitAck::done() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitAck.done)
  return done_;
}
inline void SimInitAck::set_done(bool value) {
  
  done_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitAck.done)
}

// optional bool stopSimReq = 2;
inline void SimInitAck::clear_stopsimreq() {
  stopsimreq_ = false;
}
inline bool SimInitAck::stopsimreq() const {
  // @@protoc_insertion_point(field_get:ns3opengym.SimInitAck.stopSimReq)
  return stopsimreq_;
}
inline void SimInitAck::set_stopsimreq(bool value) {
  
  stopsimreq_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.SimInitAck.stopSimReq)
}

// -------------------------------------------------------------------

// EnvStateMsg

// optional .ns3opengym.DataContainer obsData = 1;
inline bool EnvStateMsg::has_obsdata() const {
  return !_is_default_instance_ && obsdata_ != NULL;
}
inline void EnvStateMsg::clear_obsdata() {
  if (GetArenaNoVirtual() == NULL && obsdata_ != NULL) delete obsdata_;
  obsdata_ = NULL;
}
inline const ::ns3opengym::DataContainer& EnvStateMsg::obsdata() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.obsData)
  return obsdata_ != NULL ? *obsdata_ : *default_instance_->obsdata_;
}
inline ::ns3opengym::DataContainer* EnvStateMsg::mutable_obsdata() {
  
  if (obsdata_ == NULL) {
    obsdata_ = new ::ns3opengym::DataContainer;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvStateMsg.obsData)
  return obsdata_;
}
inline ::ns3opengym::DataContainer* EnvStateMsg::release_obsdata() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvStateMsg.obsData)
  
  ::ns3opengym::DataContainer* temp = obsdata_;
  obsdata_ = NULL;
  return temp;
}
inline void EnvStateMsg::set_allocated_obsdata(::ns3opengym::DataContainer* obsdata) {
  delete obsdata_;
  obsdata_ = obsdata;
  if (obsdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvStateMsg.obsData)
}

// optional float reward = 2;
inline void EnvStateMsg::clear_reward() {
  reward_ = 0;
}
inline float EnvStateMsg::reward() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.reward)
  return reward_;
}
inline void EnvStateMsg::set_reward(float value) {
  
  reward_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.reward)
}

// optional bool isGameOver = 3;
inline void EnvStateMsg::clear_isgameover() {
  isgameover_ = false;
}
inline bool EnvStateMsg::isgameover() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.isGameOver)
  return isgameover_;
}
inline void EnvStateMsg::set_isgameover(bool value) {
  
  isgameover_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.isGameOver)
}

// optional .ns3opengym.EnvStateMsg.Reason reason = 4;
inline void EnvStateMsg::clear_reason() {
  reason_ = 0;
}
inline ::ns3opengym::EnvStateMsg_Reason EnvStateMsg::reason() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.reason)
  return static_cast< ::ns3opengym::EnvStateMsg_Reason >(reason_);
}
inline void EnvStateMsg::set_reason(::ns3opengym::EnvStateMsg_Reason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.reason)
}

// optional string info = 5;
inline void EnvStateMsg::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvStateMsg::info() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvStateMsg.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvStateMsg::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ns3opengym.EnvStateMsg.info)
}
inline void EnvStateMsg::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ns3opengym.EnvStateMsg.info)
}
inline void EnvStateMsg::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ns3opengym.EnvStateMsg.info)
}
inline ::std::string* EnvStateMsg::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvStateMsg.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvStateMsg::release_info() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvStateMsg.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvStateMsg::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvStateMsg.info)
}

// -------------------------------------------------------------------

// EnvActMsg

// optional .ns3opengym.DataContainer actData = 1;
inline bool EnvActMsg::has_actdata() const {
  return !_is_default_instance_ && actdata_ != NULL;
}
inline void EnvActMsg::clear_actdata() {
  if (GetArenaNoVirtual() == NULL && actdata_ != NULL) delete actdata_;
  actdata_ = NULL;
}
inline const ::ns3opengym::DataContainer& EnvActMsg::actdata() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvActMsg.actData)
  return actdata_ != NULL ? *actdata_ : *default_instance_->actdata_;
}
inline ::ns3opengym::DataContainer* EnvActMsg::mutable_actdata() {
  
  if (actdata_ == NULL) {
    actdata_ = new ::ns3opengym::DataContainer;
  }
  // @@protoc_insertion_point(field_mutable:ns3opengym.EnvActMsg.actData)
  return actdata_;
}
inline ::ns3opengym::DataContainer* EnvActMsg::release_actdata() {
  // @@protoc_insertion_point(field_release:ns3opengym.EnvActMsg.actData)
  
  ::ns3opengym::DataContainer* temp = actdata_;
  actdata_ = NULL;
  return temp;
}
inline void EnvActMsg::set_allocated_actdata(::ns3opengym::DataContainer* actdata) {
  delete actdata_;
  actdata_ = actdata;
  if (actdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ns3opengym.EnvActMsg.actData)
}

// optional bool stopSimReq = 2;
inline void EnvActMsg::clear_stopsimreq() {
  stopsimreq_ = false;
}
inline bool EnvActMsg::stopsimreq() const {
  // @@protoc_insertion_point(field_get:ns3opengym.EnvActMsg.stopSimReq)
  return stopsimreq_;
}
inline void EnvActMsg::set_stopsimreq(bool value) {
  
  stopsimreq_ = value;
  // @@protoc_insertion_point(field_set:ns3opengym.EnvActMsg.stopSimReq)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns3opengym

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ns3opengym::EnvStateMsg_Reason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3opengym::EnvStateMsg_Reason>() {
  return ::ns3opengym::EnvStateMsg_Reason_descriptor();
}
template <> struct is_proto_enum< ::ns3opengym::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3opengym::MsgType>() {
  return ::ns3opengym::MsgType_descriptor();
}
template <> struct is_proto_enum< ::ns3opengym::SpaceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3opengym::SpaceType>() {
  return ::ns3opengym::SpaceType_descriptor();
}
template <> struct is_proto_enum< ::ns3opengym::Dtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3opengym::Dtype>() {
  return ::ns3opengym::Dtype_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
